#!/Users/fumiya/.pyenv/shims/python
# coding: utf-8

import sys
import numpy as np
import scipy.optimize
from optparse import OptionParser

class Fitting() :
    def __init__(self, datalist, options, n) :
        assert len(datalist) > 0 and options.na > 0 and n > 0
        self._init_param = np.array([0, 0]) # initial guess for the parameters
        self._datalist = datalist
        self._na = options.na
        self._n = n

    def init_ft(self) :

        self._xlist = np.array([x for x, y in self._datalist])
        self._ylist = np.array([y for x, y in self._datalist])

        assert len(self._xlist) == len(self._ylist) == self._n

    def func_linear(self, x, a, b) :

        return ((a * x) / self._na) + b

    def func_quadrastic(self, x, a, b, c) :

        return ((a * (x ** 2)) / self._na) + (b * x) + c

    def func_frac(self, x, a, b) :

        return (a / x) + b

    def func_BA_coop(self, x, a, b) :

        return (((a * x) / (self._na * np.log(x))) + b)

    def func_BA_dia(self, x, a, b) :

        return (a * (np.log(x) / (np.log(np.log(x))))) + b

    def func_ER_RRS6(self, x, a, b) :

        return (a * (x / (np.log(np.log(x))))) + b

    def func_ER_dia(self, x, a, b) :

        return (a * (np.log(x))) + b

    def func_max(self, x, a, b, c) :

        return (a * (c ** (np.log(x)))) + b

    def func_bfs(self, x, a, b) :

        return (a * ((8 ** (x + 1)) - 8) / 7) + b

    def calc_func_a_b(self, func) :

        self._a_b, covariance = scipy.optimize.curve_fit(func,
                                                         self._xlist,
                                                         self._ylist,
                                                         p0=self._init_param
                                                         )

        assert len(self._a_b) == 2

    def calc_func_a_b_c(self, func) :

        self._init_param = np.array([10, 10, 10])

        self._a_b_c, covariance = scipy.optimize.curve_fit(func,
                                                           self._xlist,
                                                           self._ylist,
                                                           p0=self._init_param
                                                           )
        print('x : {0}, y : {1}'.format(self._xlist, self._ylist))
        assert len(self._a_b_c) == 3

    def get_func_a_b(self) :

        return self._a_b[0], self._a_b[1]

    def get_func_a_b_c(self) :

        return self._a_b_c[0], self._a_b_c[1], self._a_b_c[2]

    def calc_fitting_with_a_b(self, func, a, b) :

        self._fitting_list = [func(x, a, b) for x in self._xlist]
        assert len(self._fitting_list) == self._n

    def calc_fitting_with_a_b_c(self, func, a, b, c) :

        self._fitting_list = [func(x, a, b, c) for x in self._xlist]

        assert len(self._fitting_list) == self._n

    def print_fitting(self, type_fit):

        if type_fit == 'linear' :
            self.calc_func_a_b(self.func_linear)
            a, b = self.get_func_a_b()
            self.calc_fitting_with_a_b(self.func_linear, a, b)

        elif type_fit == 'frac' :
            self.calc_func_a_b(self.func_frac)
            a, b = self.get_func_a_b()
            self.calc_fitting_with_a_b(self.func_frac, a, b)

        elif type_fit == 'BA-coop' :
            self.calc_func_a_b(self.func_BA_coop)
            a, b = self.get_func_a_b()
            self.calc_fitting_with_a_b(self.func_BA_coop, a, b)

        elif type_fit == 'BA-dia' :
            self.calc_func_a_b(self.func_BA_dia)
            a, b = self.get_func_a_b()
            self.calc_fitting_with_a_b(self.func_BA_dia, a, b)

        elif type_fit == 'ER_RRS6' :
            self.calc_func_a_b(self.func_ER_RRS6)
            a, b = self.get_func_a_b()
            self.calc_fitting_with_a_b(self.func_ER_RRS6, a, b)

        elif type_fit == 'ER-dia' :
            self.calc_func_a_b(self.func_ER_dia)
            a, b = self.get_func_a_b()
            self.calc_fitting_with_a_b(self.func_ER_dia, a, b)

        elif type_fit == 'quadrastic' :
            self.calc_func_a_b_c(self.func_quadrastic)
            a, b, c = self.get_func_a_b_c()
            self.calc_fitting_with_a_b_c(self.func_quadrastic, a, b, c)

        elif type_fit == 'max' :
            self.calc_func_a_b_c(self.func_max)
            a, b, c = self.get_func_a_b_c()
            self.calc_fitting_with_a_b_c(self.func_max, a, b, c)

        elif type_fit == 'bfs' :
            self.calc_func_a_b(self.func_bfs)
            a, b = self.get_func_a_b()
            self.calc_fitting_with_a_b(self.func_bfs, a, b)

        else :
            pass

        if type_fit == 'quadrastic' or type_fit == 'max':
            print("a: {0} b: {1} c: {2}".format(a, b, c))
            for x, y in zip(self._xlist, self._fitting_list) :
                print(x, y)

        else :
            print("a: {0} b: {1}".format(a, b))
            for x, y in zip(self._xlist, self._fitting_list) :
                print(x, y)


def read_data() :
    datalist = []
    n = 0
    for line in sys.stdin:
        n += 1
        tok = line.split()

        assert len(tok) == 2

        x = int(tok[0])
        y = float(tok[1])

        datalist.append((x, y))

    return n, datalist

def get_option(usage) :
    parser = OptionParser(usage)
    parser.add_option(
        "-t",
        type="string",
        action="store",
        dest="type",
        default="",
        metavar="TYPE,[TYPE...]",
        help=
        "specify the function to fit data with [linear/frac/BA-coop/BA-dia/ER-dia/quadrastic/max/ER_RRS6]"
    )
    parser.add_option("--na",
                      "--number-agents",
                      type="int",
                      action="store",
                      dest="na",
                      default=1,
                      metavar="VALUE",
                      help="specify the number of agents (default: 1)."
    )

    options, args = parser.parse_args()

    return options

if __name__ == '__main__':

    options = get_option(usage="usage: %prog [options] data")

    n, datalist = read_data()
    # print("na: {0}, n: {1}, data: {2}".format(options.na, n, datalist))

    Ft = Fitting(datalist, options, n)
    Ft.init_ft()
    Ft.print_fitting(options.type)
